name: Infra-Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - production
        default: 'production'
      confirmation:
        description: 'Type "DESTROY" to confirm'
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  TF_IN_AUTOMATION: true

jobs:
  destroy-preparation:
    if: github.event.inputs.confirmation == 'DESTROY'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init

      - name: Verify AWS Permissions
        run: |
          aws sts get-caller-identity
          aws eks describe-cluster --name $(terraform output -raw eks_cluster_name) || true
          aws rds describe-db-clusters || true

      - name: Backup State
        run: |
          aws s3 cp s3://ofurmaniuk/terraform-project/terraform.tfstate \
          s3://ofurmaniuk/terraform-project/backups/terraform.tfstate.$(date +%Y%m%d_%H%M%S)
      
      - name: Plan Destroy
        id: plan
        run: terraform plan -destroy -out=destroy.tfplan

  destroy-approval:
    needs: destroy-preparation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Approve Destruction
        run: echo "Destruction approved for ${{ github.event.inputs.environment }}"

  destroy-execution:
    needs: destroy-approval
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init

      - name: Cleanup Kubernetes Resources
        run: |
          if ! aws eks describe-cluster --name $(terraform output -raw eks_cluster_name) 2>/dev/null; then
            echo "EKS cluster not found, skipping cleanup"
            exit 0
          fi

          aws eks update-kubeconfig --name $(terraform output -raw eks_cluster_name) --region $AWS_REGION
          
          echo "Removing namespaces and resources..."
          for ns in $(kubectl get ns -o name | grep -v "kube-system"); do
            kubectl delete $ns --timeout=5m || true
          done
          
          echo "Removing PVCs..."
          kubectl delete pvc --all --all-namespaces || true
          
          echo "Removing LoadBalancer services..."
          kubectl get ns --no-headers | while read ns; do
            kubectl delete svc -n $ns --all || true
          done
          
          echo "Waiting for resources cleanup..."
          sleep 45

      - name: Destroy Infrastructure
        run: |
          echo "Starting ordered destruction process..."
          
          echo "1. Destroying Kubernetes addons and services..."
          terraform destroy -target="module.tools" -auto-approve || true
          sleep 30
          
          echo "2. Destroying load balancers and ingress..."
          kubectl delete svc --all --all-namespaces || true
          sleep 30
          
          echo "3. Destroying EKS node groups..."
          terraform destroy -target="module.eks.aws_eks_node_group.main" -auto-approve || true
          sleep 30
          
          echo "4. Destroying EKS cluster..."
          terraform destroy -target="module.eks.aws_eks_cluster.main" -auto-approve || true
          sleep 30
          
          echo "5. Destroying NAT Gateway..."
          terraform destroy -target="module.vpc.aws_nat_gateway.main" -auto-approve || true
          sleep 20
          
          echo "6. Destroying EIP..."
          terraform destroy -target="module.vpc.aws_eip.nat" -auto-approve || true
          sleep 20
          
          echo "7. Destroying RDS instances..."
          terraform destroy -target="module.rds.aws_rds_cluster_instance.aurora_instance" -auto-approve || true
          sleep 30
          
          echo "8. Destroying RDS cluster..."
          terraform destroy -target="module.rds.aws_rds_cluster.aurora" -auto-approve || true
          sleep 30
          
          echo "9. Destroying VPC resources..."
          terraform destroy -target="module.vpc" -auto-approve || true
          sleep 30
          
          echo "10. Final cleanup of remaining resources..."
          terraform destroy -auto-approve

      - name: Verify Complete Destruction
        run: |
          echo "Running final verification checks..."
          
          echo "Checking EKS clusters..."
          if aws eks list-clusters | grep "production"; then
            echo "Warning: EKS clusters still exist"
          fi
          
          echo "Checking RDS instances..."
          if aws rds describe-db-instances | grep "production"; then
            echo "Warning: RDS instances still exist"
          fi
          
          echo "Checking VPCs..."
          if aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=${{ github.event.inputs.environment }}" | grep "VpcId"; then
            echo "Warning: Tagged VPCs still exist"
          fi
          
          echo "Checking NAT Gateways..."
          if aws ec2 describe-nat-gateways | grep "NatGatewayId"; then
            echo "Warning: NAT Gateways still exist"
          fi
          
          echo "Checking EIPs..."
          if aws ec2 describe-addresses | grep "AllocationId"; then
            echo "Warning: EIPs still exist"
          fi

      - name: Cleanup Local Files
        if: always()
        run: |
          rm -f kubeconfig.yaml
          rm -f .terraform.lock.hcl
          rm -rf .terraform