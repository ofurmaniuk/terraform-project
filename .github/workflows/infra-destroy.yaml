name: Infra-Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - production
        default: 'production'
      confirmation:
        description: 'Type "DESTROY" to confirm'
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  TF_IN_AUTOMATION: true

jobs:
  destroy-preparation:
    if: github.event.inputs.confirmation == 'DESTROY'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init
      
      - name: Plan Destroy
        id: plan
        run: terraform plan -destroy -out=destroy.tfplan

  destroy-approval:
    needs: destroy-preparation
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Approve Destruction
        run: echo "Destruction approved for ${{ github.event.inputs.environment }}"

  destroy-execution:
    needs: destroy-approval
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init

      - name: Cleanup EKS Resources
        run: |
          aws eks update-kubeconfig --name $(terraform output -raw eks_cluster_name) --region $AWS_REGION
          
          echo "Removing Helm releases..."
          kubectl delete helmrelease --all --all-namespaces || true
          
          echo "Removing LoadBalancer services..."
          kubectl get ns --no-headers | while read ns; do
            kubectl delete svc -n $ns --all || true
          done
          
          echo "Removing all workloads..."
          kubectl delete deployment,statefulset,daemonset --all --all-namespaces || true
          
          echo "Removing PVCs..."
          kubectl delete pvc --all --all-namespaces || true

      - name: Destroy Infrastructure
        run: |
          echo "Destroying EKS resources..."
          terraform destroy -target="module.tools" -auto-approve || true
          terraform destroy -target="module.eks" -auto-approve || true
          
          echo "Destroying RDS resources..."
          terraform destroy -target="module.rds" -auto-approve || true
          
          echo "Destroying remaining resources..."
          terraform destroy -auto-approve

      - name: Verify Destruction
        run: |
          echo "Verifying EKS clusters..."
          aws eks list-clusters
          
          echo "Verifying RDS clusters..."
          aws rds describe-db-clusters
          
          echo "Verifying VPCs..."
          aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=${{ github.event.inputs.environment }}"