name: Destroy-Applications

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: "Type 'DESTROY' to confirm"
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: production-cluster

jobs:
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.inputs.confirmation == 'DESTROY'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify cluster
        run: |
          echo "=== Verifying cluster exists ==="
          if ! aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} &>/dev/null; then
            echo "Cluster not found: ${{ env.CLUSTER_NAME }}"
            exit 1
          fi
          echo "Cluster ${{ env.CLUSTER_NAME }} verified."

      - name: Create pre-destroy backup
        run: |
          echo "=== Creating pre-destroy backup ==="
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="backup-${TIMESTAMP}"
          mkdir -p $BACKUP_DIR
          
          # Connect to the cluster
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          
          # Export ArgoCD applications
          kubectl get applications.argoproj.io -n argocd -o yaml > $BACKUP_DIR/applications.yaml || true
          
          # Export other important resources
          kubectl get namespaces -o yaml > $BACKUP_DIR/namespaces.yaml || true
          kubectl get deployments --all-namespaces -o yaml > $BACKUP_DIR/deployments.yaml || true
          kubectl get services --all-namespaces -o yaml > $BACKUP_DIR/services.yaml || true
          kubectl get ingress --all-namespaces -o yaml > $BACKUP_DIR/ingresses.yaml || true
          
          # Zip the backup files
          zip -r $BACKUP_DIR.zip $BACKUP_DIR
          
          # Upload backup to S3
          aws s3 cp $BACKUP_DIR.zip s3://ofurmaniuk/terraform-project/backups/$BACKUP_DIR.zip
          
          echo "Backup created and uploaded to S3: $BACKUP_DIR.zip"

  destroy-applications:
    needs: verify
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Connect to cluster
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl get nodes || { echo "Error: Cannot connect to cluster"; exit 1; }

      - name: Destroy applications
        run: |
          echo "=== Starting application destruction ==="
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          LOG_FILE="destroy-log-${TIMESTAMP}.txt"
          
          # Function to delete resource with proper logging and error handling
          delete_resource() {
            local namespace=$1
            local resource_type=$2
            local resource_name=$3
            
            echo "Deleting $resource_type/$resource_name in namespace $namespace" | tee -a $LOG_FILE
            kubectl delete $resource_type -n $namespace $resource_name --timeout=60s --wait=true || {
              echo "Warning: Failed to delete $resource_type/$resource_name, forcing deletion..." | tee -a $LOG_FILE
              kubectl delete $resource_type -n $namespace $resource_name --force --grace-period=0 || true
            }
          }
          
          # 1. First, remove all ArgoCD applications in reverse order
          echo "=== Removing ArgoCD applications ===" | tee -a $LOG_FILE
          
          ARGOCD_APPS=(
            "web"
            "api"
            "vault"
            "metrics-server"
            "ingress-nginx"
            "monitoring"
            "aws-ebs-csi-driver"
          )
          
          for app in "${ARGOCD_APPS[@]}"; do
            delete_resource "argocd" "applications.argoproj.io" "$app"
            # Wait for cascading deletion
            sleep 10
          done
          
          # 2. Delete namespaces created by applications
          echo "=== Removing namespaces ===" | tee -a $LOG_FILE
          
          NAMESPACES_TO_DELETE=(
            "production"
            "monitoring"
            "ingress-nginx"
            "vault"
          )
          
          for ns in "${NAMESPACES_TO_DELETE[@]}"; do
            echo "Deleting namespace $ns" | tee -a $LOG_FILE
            kubectl delete namespace $ns --timeout=120s || {
              echo "Forcing deletion of namespace $ns..." | tee -a $LOG_FILE
              
              # Remove finalizers from resources in the namespace
              for resource_type in $(kubectl api-resources --namespaced=true --verbs=delete -o name); do
                kubectl get "$resource_type" -n "$ns" -o name | xargs -r -n1 kubectl patch -n "$ns" --type="json" --patch='[{"op":"remove","path":"/metadata/finalizers"}]' || true
              done
              
              # Force delete the namespace
              kubectl delete namespace $ns --force --grace-period=0 || true
            }
          done
          
          # 3. Clean up any persistent volumes and claims
          echo "=== Cleaning up persistent volumes ===" | tee -a $LOG_FILE
          kubectl delete pvc --all --all-namespaces || true
          kubectl delete pv --all || true
          
          # Upload destroy log to S3
          aws s3 cp $LOG_FILE s3://ofurmaniuk/terraform-project/app-logs/$LOG_FILE
          
          echo "=== Application destruction completed ===" | tee -a $LOG_FILE

      - name: Verify destruction
        run: |
          echo "=== Verifying destruction ==="
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          VERIFY_FILE="destroy-verification-${TIMESTAMP}.txt"
          
          {
            echo "Destruction completed at $(date)"
            echo "Cluster: ${{ env.CLUSTER_NAME }}"
            echo ""
            echo "=== Remaining ArgoCD Applications ==="
            kubectl get applications.argoproj.io -n argocd || echo "No applications found"
            echo ""
            echo "=== Remaining namespaces ==="
            kubectl get namespaces
            echo ""
            echo "=== Remaining resources ==="
            kubectl get all --all-namespaces
          } > $VERIFY_FILE
          
          aws s3 cp $VERIFY_FILE s3://ofurmaniuk/terraform-project/app-logs/$VERIFY_FILE