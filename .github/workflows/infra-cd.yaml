name: Infra-cd 

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
        default: 'plan'
  push:
    branches: [ "main" ]
    paths:
      - "modules/**"
      - ".github/workflows/infra-cd.yaml"
      - "*.tf"

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-2
  TF_IN_AUTOMATION: true

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"

      - uses: terraform-linters/setup-tflint@v3
      - run: tflint --init
      
      - name: Run TFLint and upload to S3
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          tflint --format json | tee tflint-${TIMESTAMP}.json
          tflint -f compact | tee tflint-${TIMESTAMP}.log
          aws s3 cp tflint-${TIMESTAMP}.json s3://ofurmaniuk/terraform-project/lint-logs/tflint-${TIMESTAMP}.json
          aws s3 cp tflint-${TIMESTAMP}.log s3://ofurmaniuk/terraform-project/lint-logs/tflint-${TIMESTAMP}.log
        continue-on-error: true

  preparation:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init
        
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan | tee tf-plan-output.txt
        continue-on-error: true
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tf-plan
          path: tf-plan-output.txt

      - name: Check Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy:
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    needs: preparation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init

      - name: Create VPC and Networking
        run: |
          terraform apply -target=module.vpc -auto-approve
          echo "Waiting for VPC resources to be ready..."
          sleep 30

      - name: Create EKS Cluster
        run: |
          terraform apply -target=module.eks.aws_eks_cluster.main -auto-approve
          echo "Waiting for EKS cluster to be ready..."
          sleep 90

      - name: Create Node Group
        run: |
          terraform apply -target=module.eks.aws_eks_node_group.main -auto-approve
          echo "Waiting for node group to be ready..."
          sleep 90

          - name: Get Cluster Name
          id: cluster-name
          run: echo "CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
  
      - name: Configure kubectl
        run: |
            aws eks update-kubeconfig --name "${{ env.CLUSTER_NAME }}" --region ${{ env.AWS_REGION }}
            kubectl get nodes
            sleep 30

      - name: Create RDS Instance
        run: |
          terraform apply -target=module.rds -auto-approve
          echo "Waiting for RDS to be ready..."
          sleep 60

      - name: Deploy Tools and Applications
        run: |
          terraform apply -auto-approve
          
      - name: Verify Infrastructure
        run: |
          echo "Verifying EKS Cluster..."
          aws eks describe-cluster --name $(terraform output -raw eks_cluster_name) --query 'cluster.status' || exit 1
          
          echo "Verifying Node Group..."
          kubectl wait --for=condition=ready nodes --all --timeout=300s || exit 1
          
          echo "Verifying ArgoCD Installation..."
          kubectl get namespace argocd || exit 1
          kubectl -n argocd wait --for=condition=available deployment/argocd-server --timeout=300s || exit 1
          
          echo "Verifying RDS..."
          aws rds describe-db-clusters --query 'DBClusters[?DBClusterIdentifier==`production-aurora-cluster`].Status' || exit 1