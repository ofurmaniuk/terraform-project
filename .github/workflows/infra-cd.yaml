name: Infra-CD

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "modules/**"
      - ".github/workflows/infra-cd.yaml"
      - "*.tf"

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-2
  TF_IN_AUTOMATION: true

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"

      - uses: terraform-linters/setup-tflint@v3
      - run: tflint --init
      
      - name: Run TFLint with logging
        run: |
          tflint --format json > tflint-results.json
          tflint -f compact | tee tflint-output.txt
        continue-on-error: true

      - name: Upload TFLint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: tflint-results
          path: |
            tflint-results.json
            tflint-output.txt

  preparation:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init
        
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan | tee tf-plan-output.txt
        continue-on-error: true
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tf-plan
          path: tf-plan-output.txt

      - name: Check Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy:
    needs: preparation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init
      
      - name: Apply Infrastructure
        id: apply
        run: terraform apply -auto-approve
      
      - name: Verify Infrastructure
        run: |
          # Check EKS cluster status
          aws eks describe-cluster --name production-cluster --query 'cluster.status' || exit 1
          
          # Check RDS status
          aws rds describe-db-clusters --query 'DBClusters[?DBClusterIdentifier==`production-aurora-cluster`].Status' || exit 1

  destroy:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.10.1"
      
      - name: Initialize Terraform
        run: terraform init
      
      - name: Destroy Infrastructure
        run: terraform destroy -auto-approve
        
      - name: Verify Destruction
        run: |
          # Verify EKS cluster deletion
          if aws eks describe-cluster --name production-cluster 2>/dev/null; then
            echo "EKS cluster still exists"
            exit 1
          fi
          
          # Verify RDS cluster deletion
          if aws rds describe-db-clusters --query 'DBClusters[?DBClusterIdentifier==`production-aurora-cluster`]' 2>/dev/null; then
            echo "RDS cluster still exists"
            exit 1
          fi